// Code generated by mockery v1.0.0. DO NOT EDIT.

package devicewallet

import io "io"
import mock "github.com/stretchr/testify/mock"
import wire "github.com/skycoin/hardware-wallet-go/src/device-wallet/wire"

// MockDeviceDriver is an autogenerated mock type for the DeviceDriver type
type MockDeviceDriver struct {
	mock.Mock
}

// DeviceType provides a mock function with given fields:
func (_m *MockDeviceDriver) DeviceType() DeviceType {
	ret := _m.Called()

	var r0 DeviceType
	if rf, ok := ret.Get(0).(func() DeviceType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(DeviceType)
	}

	return r0
}

// GetDevice provides a mock function with given fields:
func (_m *MockDeviceDriver) GetDevice() (io.ReadWriteCloser, string, error) {
	ret := _m.Called()

	var r0 io.ReadWriteCloser
	if rf, ok := ret.Get(0).(func() io.ReadWriteCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadWriteCloser)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SendToDevice provides a mock function with given fields: dev, chunks
func (_m *MockDeviceDriver) SendToDevice(dev io.ReadWriteCloser, chunks [][64]byte) (wire.Message, error) {
	ret := _m.Called(dev, chunks)

	var r0 wire.Message
	if rf, ok := ret.Get(0).(func(io.ReadWriteCloser, [][64]byte) wire.Message); ok {
		r0 = rf(dev, chunks)
	} else {
		r0 = ret.Get(0).(wire.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReadWriteCloser, [][64]byte) error); ok {
		r1 = rf(dev, chunks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToDeviceNoAnswer provides a mock function with given fields: dev, chunks
func (_m *MockDeviceDriver) SendToDeviceNoAnswer(dev io.ReadWriteCloser, chunks [][64]byte) error {
	ret := _m.Called(dev, chunks)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.ReadWriteCloser, [][64]byte) error); ok {
		r0 = rf(dev, chunks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
